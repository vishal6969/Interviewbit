/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval a, Interval b) {
                return a.start - b.start;
            }
        });
        ArrayList<Interval> ans = new ArrayList<>();
        ans.add(intervals.get(0));

        for(int i = 1; i < intervals.size(); i++) {
            Interval temp = intervals.get(i);
            Interval temp1 = ans.get(ans.size()-1);

            if(temp.start <= temp1.end) {
                ans.remove(ans.size()-1);
                ans.add(new Interval(temp1.start, Math.max(temp.end, temp1.end)));
            }
            else {
                ans.add(new Interval(temp.start, temp.end));
            }
        }

        return ans;
    }
}
